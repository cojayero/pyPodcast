#!/usr/bin/env python3
"""
Script para probar la reproducci√≥n actual de la aplicaci√≥n
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from services.text_to_speech import TextToSpeechService
from services.audio_player import AudioPlayer
import time

def test_current_app_audio():
    """Prueba el flujo actual de TTS -> AudioPlayer"""
    print("=== PRUEBA DEL FLUJO ACTUAL TTS -> AUDIO PLAYER ===\n")
    
    # Inicializar servicios
    tts = TextToSpeechService()
    player = AudioPlayer()
    
    # Generar audio con TTS
    test_text = "Hola, esto es una prueba del reproductor de audio embebido."
    
    print("üé§ Generando audio con TTS...")
    try:
        audio_file = tts.text_to_speech(test_text, "test_reproduction", "Prueba de reproducci√≥n")
        print(f"‚úì Audio generado: {audio_file}")
        
        # Verificar que el archivo existe y su extensi√≥n
        from pathlib import Path
        audio_path = Path(audio_file)
        if audio_path.exists():
            print(f"‚úì Archivo existe: {audio_path}")
            print(f"üìÅ Tama√±o: {audio_path.stat().st_size} bytes")
            print(f"üéµ Extensi√≥n: {audio_path.suffix}")
        else:
            print(f"‚úó Archivo no existe: {audio_path}")
            return
        
    except Exception as e:
        print(f"‚úó Error generando audio: {e}")
        return
    
    # Intentar cargar en el reproductor
    print(f"\nüéµ Intentando cargar en AudioPlayer...")
    try:
        success = player.load_file(audio_file)
        if success:
            print("‚úì Archivo cargado exitosamente")
            
            # Intentar reproducir
            print("‚ñ∂Ô∏è  Intentando reproducir...")
            play_success = player.play()
            if play_success:
                print("‚úì Reproducci√≥n iniciada")
                
                # Esperar un poco y verificar estado
                time.sleep(1)
                if player.is_playing_file():
                    print("‚úì Audio se est√° reproduciendo correctamente")
                    
                    # Dejar reproducir por 3 segundos
                    time.sleep(3)
                    player.stop()
                    print("‚èπÔ∏è  Reproducci√≥n detenida")
                else:
                    print("‚úó Audio no se est√° reproduciendo (pygame get_busy = False)")
            else:
                print("‚úó Error iniciando reproducci√≥n")
        else:
            print("‚úó Error cargando archivo en AudioPlayer")
            
    except Exception as e:
        print(f"‚úó Error en AudioPlayer: {e}")
    
    # Limpiar
    player.cleanup()
    
    print(f"\n=== DIAGN√ìSTICO ===")
    print(f"El problema est√° en que TTS genera archivos {Path(audio_file).suffix}")
    print(f"pero pygame solo reproduce WAV correctamente.")
    print(f"\nüí° SOLUCI√ìN NECESARIA:")
    print(f"Modificar TextToSpeechService para generar WAV en lugar de M4A/AIFF")

if __name__ == "__main__":
    test_current_app_audio()
