#!/usr/bin/env python3
"""
Demostraci√≥n de Apple Intelligence para Res√∫menes de YouTube

Este script demuestra c√≥mo usar la implementaci√≥n de Apple Intelligence
para resumir transcripciones de YouTube, siguiendo exactamente el ejemplo
proporcionado en ComousarAppleIntelligence.txt.

Funcionalidades demostradas:
- Lectura de archivos de transcripci√≥n
- Generaci√≥n de res√∫menes con prompts personalizados  
- Manejo de la ventana de contexto de 4096 tokens
- Fragmentaci√≥n autom√°tica para textos largos
- Prompts optimizados para diferentes estilos

Author: Demo Team
Date: 2025
"""

import sys
import os

# A√±adir el directorio ra√≠z al path
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '.')))

from services.apple_intelligence_summarizer import get_apple_intelligence_service
import logging

# Configurar logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def read_transcription_file(file_path: str) -> str:
    """
    Lee el contenido de un archivo de transcripci√≥n de texto.
    
    (Implementaci√≥n basada en ComousarAppleIntelligence.txt)

    Args:
        file_path (str): La ruta al archivo de transcripci√≥n.

    Returns:
        str: El contenido del archivo como una cadena, o None si ocurre un error.
    """
    try:
        with open(file_path, 'r', encoding='utf-8') as file:
            content = file.read()
        return content
    except FileNotFoundError:
        print(f"Error: No se encontr√≥ el archivo '{file_path}'.")
        return None
    except Exception as e:
        print(f"Ocurri√≥ un error al leer el archivo: {e}")
        return None

def create_sample_transcript():
    """Crea una transcripci√≥n de ejemplo para la demostraci√≥n"""
    return """
    Hola y bienvenidos a nuestro canal de tecnolog√≠a. En el video de hoy vamos a hablar sobre
    Apple Intelligence, la nueva plataforma de inteligencia artificial que Apple ha integrado
    en sus dispositivos m√°s recientes.
    
    Apple Intelligence representa un cambio fundamental en c√≥mo pensamos sobre la IA personal.
    A diferencia de otros sistemas que dependen de la nube, Apple Intelligence funciona
    completamente en el dispositivo, lo que significa que tus datos nunca salen de tu Mac,
    iPhone o iPad.
    
    Las caracter√≠sticas principales incluyen herramientas de escritura que pueden resumir,
    corregir y reescribir texto autom√°ticamente. Tambi√©n hay capacidades avanzadas de
    an√°lisis de contenido que pueden extraer informaci√≥n clave de documentos largos.
    
    Una de las ventajas m√°s importantes es la privacidad. Como todo el procesamiento ocurre
    localmente, no tienes que preocuparte por enviar informaci√≥n sensible a servidores
    externos. Esto es especialmente importante para profesionales y empresas que manejan
    datos confidenciales.
    
    En t√©rminos de rendimiento, Apple Intelligence es sorprendentemente r√°pido. Las respuestas
    son pr√°cticamente instant√°neas porque no hay latencia de red. Adem√°s, una vez que compras
    el dispositivo, no hay costos adicionales por usar estas funciones de IA.
    
    Sin embargo, tambi√©n hay algunas limitaciones que debemos mencionar. El modelo en el
    dispositivo tiene una ventana de contexto m√°s peque√±a comparado con modelos en la nube,
    lo que significa que puede tener dificultades con documentos extremadamente largos.
    
    Para los desarrolladores, Apple ha hecho muy f√°cil integrar estas capacidades en sus
    aplicaciones. El framework Foundation Models permite a√±adir funcionalidades de IA
    con solo unas pocas l√≠neas de c√≥digo.
    
    En resumen, Apple Intelligence marca un hito importante en la democratizaci√≥n de la IA,
    haciendo que herramientas poderosas est√©n disponibles directamente en nuestros dispositivos
    sin comprometer la privacidad o generar costos adicionales.
    
    Eso es todo por hoy. Si te gust√≥ este video, no olvides darle like y suscribirte para
    m√°s contenido sobre tecnolog√≠a. Nos vemos en el pr√≥ximo video.
    """

def demo_youtube_summarization():
    """Demostraci√≥n principal de resumen de transcripci√≥n de YouTube"""
    print("üé• DEMOSTRACI√ìN: Resumen de Transcripci√≥n de YouTube con Apple Intelligence")
    print("=" * 70)
    print("Basado en la implementaci√≥n de ComousarAppleIntelligence.txt\n")
    
    # Obtener servicio Apple Intelligence
    service = get_apple_intelligence_service()
    
    # Mostrar estado del servicio
    print("üìä Estado del Servicio:")
    status = service.get_status()
    for key, value in status.items():
        print(f"   {key}: {value}")
    
    if not service.is_available:
        print("\n‚ö†Ô∏è  NOTA: Apple Intelligence no est√° disponible.")
        print("Esta demostraci√≥n mostrar√° la funcionalidad usando datos simulados.\n")
        print("Para usar Apple Intelligence realmente:")
        print("1. Aseg√∫rate de tener macOS Sequoia 15.1+")
        print("2. Habilita Apple Intelligence en Configuraci√≥n del Sistema")
        print("3. Descarga y ejecuta AppleOnDeviceOpenAI")
        print("4. Verifica que est√© ejecut√°ndose en localhost:11535\n")
    
    # Crear transcripci√≥n de ejemplo
    print("üìù Creando transcripci√≥n de ejemplo...")
    transcript = create_sample_transcript()
    
    print(f"   Longitud: {len(transcript)} caracteres")
    print(f"   Tokens estimados: {service.estimate_tokens(transcript)}")
    print(f"   ¬øCabe en ventana de contexto?: {service.can_fit_in_context(transcript, 'Resume este video.')}")
    
    # Mostrar fragmento de la transcripci√≥n
    print(f"\nüìÑ Fragmento de la transcripci√≥n:")
    print("-" * 50)
    print(transcript[:300] + "..." if len(transcript) > 300 else transcript)
    print("-" * 50)
    
    # Diferentes estilos de resumen
    summarization_styles = [
        {
            "name": "Resumen Ejecutivo",
            "prompt": """Por favor, proporciona un resumen ejecutivo de la siguiente transcripci√≥n de video de YouTube.
            
FORMATO REQUERIDO:
- M√°ximo 150 palabras
- Tono profesional y objetivo
- Incluye los puntos principales y conclusiones
- Estructura clara con introducci√≥n, desarrollo y conclusi√≥n

Transcripci√≥n del video:""",
            "max_words": 150,
            "style": "professional"
        },
        {
            "name": "Resumen para Estudiantes",
            "prompt": """Resume esta transcripci√≥n de video para un estudiante universitario.
            
INSTRUCCIONES:
- Usa lenguaje claro y accesible
- M√°ximo 100 palabras
- Enf√≥cate en los conceptos clave y aplicaciones pr√°cticas
- Incluye las ventajas y limitaciones mencionadas

Contenido del video:""",
            "max_words": 100,
            "style": "educational"
        },
        {
            "name": "Lista de Puntos Clave",
            "prompt": """Extrae los puntos clave de esta transcripci√≥n en formato de lista.

FORMATO:
‚Ä¢ Punto principal 1
‚Ä¢ Punto principal 2  
‚Ä¢ Punto principal 3
(m√°ximo 5 puntos, cada uno de 15-20 palabras)

Transcripci√≥n:""",
            "max_words": 80,
            "style": "bullet_points"
        }
    ]
    
    # Generar res√∫menes con diferentes estilos
    for i, style_config in enumerate(summarization_styles, 1):
        print(f"\n{i}. üéØ Generando {style_config['name']}...")
        print("-" * 40)
        
        if service.is_available:
            # Usar Apple Intelligence real
            result = service.summarize(
                text=transcript,
                custom_prompt=style_config['prompt'],
                max_words=style_config['max_words'],
                style="neutral"
            )
            
            if result['success']:
                print(f"‚úÖ Resumen generado exitosamente:")
                print(f"   M√©todo: {result['method']}")
                print(f"   Fragmentos procesados: {result['chunks_processed']}")
                print(f"   Tiempo de procesamiento: {result['processing_time_seconds']}s")
                print(f"   Palabras en resumen: {result['words_in_summary']}")
                print(f"   Ratio de compresi√≥n: {result['compression_ratio']}:1")
                print()
                print(f"üìã {style_config['name']}:")
                print(result['summary'])
            else:
                print(f"‚ùå Error generando resumen: {result.get('error', 'Desconocido')}")
        else:
            # Simulaci√≥n para cuando Apple Intelligence no est√° disponible
            print(f"üîÑ Simulando {style_config['name']} (Apple Intelligence no disponible)")
            print("   [Este ser√≠a el resumen generado por Apple Intelligence]")
            print("   M√©todo: simulated")
            print("   Estado: service_unavailable")
    
    print(f"\n" + "=" * 70)
    print("‚ú® DEMOSTRACI√ìN COMPLETADA")
    print("=" * 70)
    
    if service.is_available:
        print("üéâ Apple Intelligence funcion√≥ correctamente!")
        print("   Todos los res√∫menes fueron generados usando el modelo local.")
    else:
        print("‚ÑπÔ∏è  Esta fue una demostraci√≥n simulada.")
        print("   Para ver Apple Intelligence en acci√≥n, completa la configuraci√≥n.")
    
    print("\nüìö Funcionalidades demostradas:")
    print("   ‚úì Lectura de transcripciones")
    print("   ‚úì Prompts personalizados optimizados")
    print("   ‚úì M√∫ltiples estilos de resumen")
    print("   ‚úì Manejo autom√°tico de texto largo")
    print("   ‚úì Estimaci√≥n de tokens y gesti√≥n de contexto")
    print("   ‚úì M√©tricas de rendimiento y compresi√≥n")

def demo_file_based_summarization():
    """Demostraci√≥n usando archivo de transcripci√≥n real"""
    print(f"\n" + "=" * 70)
    print("üìÅ DEMOSTRACI√ìN ADICIONAL: Resumen desde Archivo")
    print("=" * 70)
    
    # Crear archivo de ejemplo
    sample_file = "youtube_transcript_demo.txt"
    transcript_content = create_sample_transcript()
    
    try:
        with open(sample_file, 'w', encoding='utf-8') as f:
            f.write(transcript_content)
        print(f"‚úÖ Archivo de ejemplo creado: {sample_file}")
    except Exception as e:
        print(f"‚ùå Error creando archivo: {e}")
        return
    
    # Leer el archivo usando la funci√≥n del documento
    print(f"üìñ Leyendo transcripci√≥n de: {sample_file}")
    transcript = read_transcription_file(sample_file)
    
    if transcript:
        print("‚úÖ Transcripci√≥n cargada exitosamente.")
        
        # Prompt personalizado seg√∫n el ejemplo del documento
        custom_summary_prompt = """Por favor, proporciona un resumen conciso de la siguiente transcripci√≥n 
de video de YouTube, destacando los temas principales y las conclusiones. Mantenlo por debajo de 200 palabras."""
        
        service = get_apple_intelligence_service()
        
        if service.is_available:
            print("ü§ñ Generando resumen con Apple Intelligence...")
            result = service.summarize(
                text=transcript,
                custom_prompt=custom_summary_prompt,
                max_words=200
            )
            
            if result['success']:
                print("\n--- üìã Resumen Generado ---")
                print(result['summary'])
                print(f"\nüìä Estad√≠sticas:")
                print(f"   Palabras originales: ~{len(transcript.split())}")
                print(f"   Palabras en resumen: {result['words_in_summary']}")
                print(f"   Compresi√≥n: {result['compression_ratio']}:1")
            else:
                print(f"\n‚ùå Fallo al generar el resumen: {result.get('error')}")
        else:
            print("‚ö†Ô∏è Apple Intelligence no disponible - usando fallback")
    else:
        print("‚ùå No se pudo proceder con el resumen debido a un error al leer el archivo.")
    
    # Limpiar archivo temporal
    try:
        os.remove(sample_file)
        print(f"\nüßπ Archivo temporal eliminado: {sample_file}")
    except:
        pass

def main():
    """Funci√≥n principal de la demostraci√≥n"""
    print("üçé APPLE INTELLIGENCE - DEMOSTRACI√ìN DE RES√öMENES DE YOUTUBE")
    print("Implementaci√≥n basada en ComousarAppleIntelligence.txt")
    print("=" * 70)
    
    # Ejecutar demostraciones
    demo_youtube_summarization()
    demo_file_based_summarization()
    
    print(f"\n" + "üé¨" * 20)
    print("¬°Demostraci√≥n completada!")
    print("Ahora puedes usar Apple Intelligence para resumir tus propias transcripciones de YouTube.")

if __name__ == "__main__":
    main()
