#!/usr/bin/env python3
"""
Verificaci√≥n final del problema de reproducci√≥n de audio
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from services.text_to_speech import TextToSpeechService
from services.audio_player import AudioPlayer
from pathlib import Path

def final_verification():
    """Verificaci√≥n final de que el problema est√° resuelto"""
    print("=== VERIFICACI√ìN FINAL: PROBLEMA DE AUDIO RESUELTO ===\n")
    
    # 1. Verificar TTS
    print("üé§ Paso 1: Verificando TextToSpeechService...")
    tts = TextToSpeechService()
    
    # Generar audio
    test_text = "Verificaci√≥n final de la correcci√≥n del reproductor de audio."
    audio_file = tts.text_to_speech(test_text, "verificacion_final")
    
    audio_path = Path(audio_file)
    print(f"   ‚úÖ Audio generado: {audio_path.name}")
    print(f"   ‚úÖ Formato: {audio_path.suffix}")
    print(f"   ‚úÖ Tama√±o: {audio_path.stat().st_size} bytes")
    
    # Verificar que es WAV
    if audio_path.suffix.lower() == '.wav':
        print("   ‚úÖ Formato correcto: WAV")
    else:
        print(f"   ‚ùå Formato incorrecto: {audio_path.suffix}")
        return False
    
    # 2. Verificar AudioPlayer
    print(f"\nüéµ Paso 2: Verificando AudioPlayer...")
    player = AudioPlayer()
    
    # Cargar archivo
    load_success = player.load_file(audio_file)
    if load_success:
        print("   ‚úÖ Carga exitosa en AudioPlayer")
    else:
        print("   ‚ùå Error cargando en AudioPlayer")
        return False
    
    # Probar reproducci√≥n
    play_success = player.play()
    if play_success:
        print("   ‚úÖ Reproducci√≥n iniciada")
        
        # Verificar que est√° reproduciendo
        import time
        time.sleep(0.5)
        if player.is_playing_file():
            print("   ‚úÖ Audio se est√° reproduciendo correctamente")
            player.stop()
            print("   ‚úÖ Reproducci√≥n detenida")
        else:
            print("   ‚ùå Audio no se est√° reproduciendo")
            return False
    else:
        print("   ‚ùå Error iniciando reproducci√≥n")
        return False
    
    # 3. Verificar formatos soportados
    print(f"\nüìã Paso 3: Verificando formatos soportados...")
    supported = player.get_supported_formats()
    print(f"   ‚úÖ Formatos soportados: {supported}")
    
    if '.wav' in supported:
        print("   ‚úÖ WAV est√° en la lista de formatos soportados")
    else:
        print("   ‚ùå WAV no est√° en la lista de formatos soportados")
    
    # Limpiar
    player.cleanup()
    
    # 4. Verificar configuraci√≥n
    print(f"\n‚öôÔ∏è Paso 4: Verificando configuraci√≥n...")
    from utils.config import config_manager
    audio_format = config_manager.get('audio.format', 'unknown')
    print(f"   ‚úÖ Formato configurado: {audio_format}")
    
    if audio_format == 'wav':
        print("   ‚úÖ Configuraci√≥n correcta")
    else:
        print(f"   ‚ö† Configuraci√≥n podr√≠a necesitar actualizaci√≥n: {audio_format}")
    
    print(f"\n=== RESUMEN ===")
    print("‚úÖ PROBLEMA RESUELTO:")
    print("   - TTS ahora genera archivos WAV")
    print("   - AudioPlayer puede cargar y reproducir WAV")
    print("   - Configuraci√≥n actualizada a formato WAV")
    print("   - Formatos soportados actualizados")
    
    print(f"\nüèÜ RESULTADO: Los archivos de audio ahora se reproducen correctamente desde el player embebido")
    
    # Limpiar archivo de prueba
    if audio_path.exists():
        audio_path.unlink()
        print(f"\nüßπ Archivo de prueba eliminado")
    
    return True

if __name__ == "__main__":
    try:
        success = final_verification()
        if success:
            print(f"\nüéâ ¬°VERIFICACI√ìN EXITOSA!")
        else:
            print(f"\n‚ùå VERIFICACI√ìN FALL√ì")
            sys.exit(1)
    except Exception as e:
        print(f"\nüí• Error durante verificaci√≥n: {e}")
        sys.exit(1)
